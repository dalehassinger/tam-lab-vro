<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="dc31fd60-86f3-4cb0-b036-d95e79e685fb" version="0.1.3" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[2. captureDiscoveredMachineDatavRA8]]></display-name>
  <position y="50.0" x="100.0"/>
  <attrib name="csvfile" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="csvfile">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="savedPathContainer" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="savedPathContainer">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="savedPathFS" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="savedPathFS">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="resourceFolderName" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="vroPassword" type="SecureString" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="vroPassword"/>
  <attrib name="vroUsername" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="vroUsername">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="vroNodeIP" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="vroNodeIP">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="dbFilename" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="dbFilename">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="refreshToken" type="SecureString" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="refreshToken"/>
  <attrib name="cspfqdn" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="cspfqdn">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="password" type="SecureString" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="vra8Password"/>
  <attrib name="username" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="vra8Username">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="hostfqdn" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="vra8host">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="authtype" type="string" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="authtype">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="resourceFolder" type="ResourceElementCategory" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="resourceFolder"/>
  <attrib name="logFileName" type="string" read-only="false">
    <value encoded="n"><![CDATA[vra-onboarding-caputureMachineDatavRA8Discovered.log]]></value>
  </attrib>
  <attrib name="err_0" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="scpTimeout" type="number" read-only="false" conf-id="c390fb19-670c-4304-a7da-5f338a848c11" conf-key="scpTimeout"/>
  <workflow-item name="item0" type="end" end-mode="0">
    <in-binding/>
    <position y="50.0" x="760.0"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item3" catch-name="item5" throw-bind-name="err_0" type="task">
    <runtime><![CDATA[environment:d5f3e6a0-7c59-4fa0-9053-aa71f7b8e8ad]]></runtime>
    <display-name><![CDATA[Capture Discovered Data from vRA 8 ]]></display-name>
    <script encoded="false"><![CDATA[import sqlite3
from sqlite3 import Error
import onboardingUtils
import logging
import vacfg_constants as const
import datetime
import onboardingUtilsvRO

logger = logging.getLogger()

# set log level
#logger.setLevel(logging.INFO)
logger.setLevel(logging.DEBUG)

# define file handler and set formatter
file_handler = logging.FileHandler('/tmp/vra-onboarding-caputureMachineDatavRA8Discovered.log')
formatter    = logging.Formatter('%(asctime)s : %(levelname)s : %(message)s')
file_handler.setFormatter(formatter)

# add file handler to logger
logger.addHandler(file_handler)

def create_connection(db_file):
    """ create a database connection to a SQLite database """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Error as e:
        print(e)

    return conn

def create_table(conn, create_table_sql, tableName):
    """ create a table from the create_table_sql statement
    :param conn: Connection object
    :param create_table_sql: a CREATE TABLE statement
    :return:
    """
    try:
        c = conn.cursor()
        dropQuery = 'DROP TABLE IF EXISTS %s;' % (tableName)
        c.execute(dropQuery)
        c.execute(create_table_sql)
    except Error as e:
        print(e)

def insertEvent( insertData ):
    sql = ''' INSERT OR IGNORE INTO machinedata(machineName, machineId, uuid, owner, businessGroup, endpointFQDN, endpointType, deploymentName, deploymentId, deploymentDate)
                VALUES (?,?,?,?,?,?,?,?,?,?);
    '''
    cur = conn.cursor()
    ret = cur.executemany(sql, insertData)
    conn.commit()

def getDeltaDate():
    cur = conn.cursor()
    cur.execute("select deploymentDate from machinedata ORDER BY deploymentDate DESC LIMIT 1;")
    for resData in cur:
        return resData[0]

    return None

def handler(context, inputs):

    try:
        begin_time = datetime.datetime.now()

        print('Extracting Machine Data.......')
        global conn

        authtype = inputs["authtype"]
        hostfqdn = inputs["hostfqdn"]
        username = inputs["username"]
        password = inputs["password"]
        cspfqdn = inputs["cspfqdn"]
        refreshToken = inputs["refreshToken"]
        dbFileNameIn = inputs["dbFilename"]
        vroNodeIP = inputs["vroNodeIP"]
        vroUsername = inputs["vroUsername"]
        vroPassword = inputs["vroPassword"]
        resourceFolderName = inputs["resourceFolderName"]
        getDelta = inputs["delta"]
        savedPathFS = inputs["savedPathFS"]
        savedPathContainer = inputs["savedPathContainer"]
        csvfile = inputs["csvfile"]
        scpTimeout = int(inputs["scpTimeout"])

        dbFileName = '/%s/%s' % (savedPathContainer, dbFileNameIn)

        print('Target environment is ' + authtype)
        logger.info('Target environment is ' + authtype)

        vra8Conn = {
            'hostfqdn': hostfqdn,
            'username': username,
            'password': password,
            'cspfqdn': cspfqdn,
            'refreshToken': refreshToken
        }
        
        hostname = vra8Conn['hostfqdn']

        if authtype == 'onprem':
            vra8Conn['token'] = 'Bearer %s' % onboardingUtils.getToken(vra8Conn['hostfqdn'], vra8Conn['username'], vra8Conn['password'], 'vra8')
        else:
            if not vra8Conn.get('refreshToken', None):
                print('No refresh token configured in ini file')
                logger.error('No refresh token configured in ini file')
                raise ValueError('RefreshToken Not Provided')
            else:
                vra8Conn['token'] = 'Bearer %s' % onboardingUtils.getToken(vra8Conn['hostfqdn'], None, vra8Conn['refreshToken'], 'vra8_cloud')

                vra8Conn['cspToken'] = 'Bearer %s' % onboardingUtils.getToken(vra8Conn['cspfqdn'], None, vra8Conn['refreshToken'], 'vracloudcsp')

                logger.debug('CSP Token: %s' % vra8Conn['cspToken'])


        logger.debug(vra8Conn['token'])
        #print(vra8Conn['token'])

        if not vra8Conn['token']:
            raise ValueError('Autherization Token not obtained')
            exit(1)

        if not dbFileName.endswith('.db'):
            print('ERROR: Unsupported database filename supplied in ini file. Make sure filename ends in .db \ne.g. myvra7data.db')
            exit(1)

        conn = create_connection(dbFileName)

        if getDelta:
            deltaDate = getDeltaDate()
            if deltaDate:
                print(deltaDate)

        if not getDelta:
            sql_create_properties_table = """ CREATE TABLE IF NOT EXISTS machineproperties (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                machineId text,
                propertyName text,
                newPropertyName text,
                propertyValue text,
                isEncrypted text,
                isHidden text
                );
            """

            sql_create_event_table = """ CREATE TABLE IF NOT EXISTS machinedata (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                import text default 'yes',
                machineName text,
                uuid text,
                machineId text NOT NULL UNIQUE,
                vra8MachineId text,
                owner text,
                newOwner text,
                businessGroup text,
                project text,
                projectId text,
                state text,
                datastore text,
                networkName text,
                endpointFQDN text,
                endpointType text,
                endpointId text,
                leaseEnd text,
                osType text,
                cloudTemplateName text,
                cloudTemplateId text,
                deploymentName text,
                deploymentId text,
                deploymentDescription text,
                deploymentDate test
                );
            """

            if conn is not None:
                #create sqllite table
                create_table(conn, sql_create_event_table, 'machinedata')
                create_table(conn, sql_create_properties_table, 'machineproperties')

        print('No, Machine Name, UUID, vRA ID, Owner, Business Group, Endpoint, Type, Deployment Name, Deployment ID, Date')

        cloudAccountData = onboardingUtils.getAllvRA8CloudAccounts(vra8Conn['hostfqdn'], vra8Conn['token'],supportedTypes=['vsphere', 'vcf','aws','vmc'])

        if authtype == 'onprem':
            machineUser = vra8Conn['username']
        else:
            #might be able to get username from token or logged in usre api call
            machineUser = 'cloudUser'

        localCounter = 0
        for thisCloudAccount in cloudAccountData:

            caId = thisCloudAccount['id']

            updateDataset = [] # list of sets

            top = 200
            skip = 0

            headers = {'Authorization': '%s' % (vra8Conn['token'])}

            vraClient = onboardingUtils.RESTClient()

            allDone = False

            #allvRA8Machines = []

            while not allDone:

                reqUrl = '%s&$top=%s&$skip=%s' % (const.vra8_get_all_unmanaged_machines_for_cloud_account % (vra8Conn['hostfqdn'], caId), top, skip)

                logger.debug('Request URL: %s' % (reqUrl))
                #print('Request URL: %s' % (reqUrl))

                resp = vraClient.get(reqUrl, headers=headers)
                today = datetime.datetime.today().strftime('%Y-%m-%d')
                if resp.status_code == 200:
                    data = resp.json()
                    #print(data)
                    for thisVM in data['content']:
                        localCounter = localCounter + 1
                        if thisVM.get('name', None):
                            updateDataset.append((thisVM['name'], thisVM['id'],thisVM['externalId'], machineUser,'Discovered',thisCloudAccount['fqdn'],thisCloudAccount['type'],thisVM['name'],thisVM['externalId'], '%sT12:00:00.013Z' % (today)))
                            print('{},{},{},{},{},{},{},{},{},{},{}'.format(localCounter,
                                thisVM['name'],
                                thisVM['externalId'],
                                thisVM['id'],
                                machineUser,
                                'Discovered',
                                thisCloudAccount['fqdn'],
                                thisCloudAccount['type'],
                                thisVM['name'],
                                thisVM['externalId'],
                                '%sT12:00:00.013Z' % (today)))
                        else:
                            logger.warning('Skipping VM')
                            logger.warning('No Name on VM: %s' % (thisVM))

                    insertEvent(updateDataset)

                else:
                    #print response code and body here with error
                    print('something went wrong')

                skip = skip + top
                if data['numberOfElements'] < top:
                    allDone = True

        
        now = datetime.datetime.now()
        dt_string = now.strftime("%d-%b-%Y-T%H%M%S")
    
        csvTmp = "/%s/%s" % (savedPathContainer, csvfile)
        csv = csvTmp.replace('.csv', "_%s.csv" % dt_string)
        
        onboardingUtilsvRO.outputData(csv, conn)
        conn.close()

        destPath = '/%s/%s' % (savedPathFS, dbFileNameIn) 
        sourcePath = '%s/%s' % (savedPathContainer, dbFileNameIn)
        
        vcoUrl = context['vcoUrl']
        tokenvro = context['getToken']()
    
        onboardingUtilsvRO.saveDataResourceElementvRO(vcoUrl, tokenvro, csv, resourceFolderName)
        result = onboardingUtilsvRO.updatevROResourceElementType(vcoUrl, tokenvro, csv.split('/')[-1])
        onboardingUtilsvRO.vROSaveDatabase(vroNodeIP, vroUsername, vroPassword, sourcePath, destPath, scpTimeout=scpTimeout)

        print('Saving backup of metadata file')
        backupPath = destPath.replace('.db', '.bak')
        onboardingUtilsvRO.vROSaveDatabase(vroNodeIP, vroUsername, vroPassword, sourcePath, backupPath, scpTimeout=scpTimeout)

    finally:
        vcoUrl = context['vcoUrl']
        tokenvro = context['getToken']()
        onboardingUtilsvRO.saveDataResourceElementvRO(vcoUrl, tokenvro, '/tmp/vra-onboarding-caputureMachineDatavRA8Discovered.log', resourceFolderName)

        print('Finished Processing.')
        print('Run Time: ')
        print(datetime.datetime.now() - begin_time)]]></script>
    <in-binding>
      <bind name="authtype" type="string" export-name="authtype"/>
      <bind name="cspfqdn" type="string" export-name="cspfqdn"/>
      <bind name="csvfile" type="string" export-name="csvfile"/>
      <bind name="resourceFolderName" type="string" export-name="resourceFolderName"/>
      <bind name="delta" type="boolean"/>
      <bind name="hostfqdn" type="string" export-name="hostfqdn"/>
      <bind name="password" type="SecureString" export-name="password"/>
      <bind name="refreshToken" type="SecureString" export-name="refreshToken"/>
      <bind name="savedPathContainer" type="string" export-name="savedPathContainer"/>
      <bind name="savedPathFS" type="string" export-name="savedPathFS"/>
      <bind name="vroNodeIP" type="string" export-name="vroNodeIP"/>
      <bind name="vroUsername" type="string" export-name="vroUsername"/>
      <bind name="vroPassword" type="SecureString" export-name="vroPassword"/>
      <bind name="username" type="string" export-name="username"/>
      <bind name="dbFilename" type="string" export-name="dbFilename"/>
      <bind name="scpTimeout" type="number" export-name="scpTimeout"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="380.0"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item1" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[var resourceFolderName = resourceFolder.name;

System.log('Resource Elements folder name: ' + resourceFolderName);

var resourceElements = Server.findAllForType( 'ResourceElement' , "c.name='"+ logFileName +"'");

if (resourceElements[0]){
    var resourceElemet =  resourceElements[0];
    System.log('Deleting old log file ' + logFileName);
    Server.removeResourceElement(resourceElemet);
}else{
    System.log('No Old Log file found for ' + logFileName);
}]]></script>
    <in-binding>
      <bind name="resourceFolder" type="ResourceElementCategory" export-name="resourceFolder"/>
      <bind name="logFileName" type="string" export-name="logFileName"/>
    </in-binding>
    <out-binding>
      <bind name="resourceFolderName" type="string" export-name="resourceFolderName"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="200.0"/>
  </workflow-item>
  <workflow-item name="item3" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[
var resourceElements = Server.findAllForType( 'ResourceElement' , "c.name='"+ logFileName +"'");

if (resourceElements[0]){
    var resourceElemet =  resourceElements[0];
    var mimeAttachment = resourceElements[0].getContentAsMimeAttachment();
    System.log('Updating Log File type for file ' + logFileName);
    mimeAttachment.mimeType = "text/plain";
    resourceElemet.setContentFromMimeAttachment(mimeAttachment);
}else{
    System.log('No Log file found for ' + logFileName);
    System.log('Check for split log file.');
    var partNumber = 0;
    var found = true;
    while (found){
        thisPart = '_part' + partNumber + '.log' 
        partFileName = logFileName.replace('.log', thisPart)
        var partResourceElements = Server.findAllForType( 'ResourceElement' , "c.name='"+ partFileName +"'");
        partNumber = partNumber + 1
        if (partResourceElements[0]){
            var partResourceElemet =  partResourceElements[0];
            var mimeAttachment = partResourceElements[0].getContentAsMimeAttachment();
            System.log('Updating Log File type for file ' + partFileName);
            mimeAttachment.mimeType = "text/plain";
            partResourceElemet.setContentFromMimeAttachment(mimeAttachment);
        }
        else{
            System.log('No Log file found for ' + partFileName);
            found = false;
        }

    }
}]]></script>
    <in-binding>
      <bind name="logFileName" type="string" export-name="logFileName"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="560.0"/>
  </workflow-item>
  <workflow-item name="item4" throw-bind-name="err_0" type="end" end-mode="1">
    <in-binding/>
    <position y="190.0" x="420.0"/>
  </workflow-item>
  <workflow-item name="item5" out-name="item4" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[
var resourceElements = Server.findAllForType( 'ResourceElement' , "c.name='"+ logFileName +"'");

if (resourceElements[0]){
    var resourceElemet =  resourceElements[0];
    var mimeAttachment = resourceElements[0].getContentAsMimeAttachment();
    System.log('Updating Log File type for file ' + logFileName);
    mimeAttachment.mimeType = "text/plain";
    resourceElemet.setContentFromMimeAttachment(mimeAttachment);
}else{
    System.log('No Log file found for ' + logFileName);
    System.log('Check for split log file.');
    var partNumber = 0;
    var found = true;
    while (found){
        thisPart = '_part' + partNumber + '.log' 
        partFileName = logFileName.replace('.log', thisPart)
        var partResourceElements = Server.findAllForType( 'ResourceElement' , "c.name='"+ partFileName +"'");
        partNumber = partNumber + 1
        if (partResourceElements[0]){
            var partResourceElemet =  partResourceElements[0];
            var mimeAttachment = partResourceElements[0].getContentAsMimeAttachment();
            System.log('Updating Log File type for file ' + partFileName);
            mimeAttachment.mimeType = "text/plain";
            partResourceElemet.setContentFromMimeAttachment(mimeAttachment);
        }
        else{
            System.log('No Log file found for ' + partFileName);
            found = false;
        }

    }
}]]></script>
    <in-binding>
      <bind name="logFileName" type="string" export-name="logFileName"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="130.0" x="380.0"/>
  </workflow-item>
  <presentation/>
</workflow>